loadLibrary("termUtilities");
load("queens-csp.stlx");

// This function collects all variables occurring in the formula f.
collectVars := procedure(f) {
    return varsTerm(parseTerm(f));
};
varsTerm := procedure(f) {
    match (f) {
        case v | isVariable(v): return { varName(v) };
        case n | isNumber(n):   return {};
        default:                return +/ [ varsTerm(t) : t in args(f) ];
    }
};

////////////////////////////////////////////////////////////////////////////////

// This is a very basic constraints solver that is based on backtracking.
solve := procedure(CSP) {
    [Vars, Vals, Constrs] := CSP;
    CSP := [Vars, Vals, { [f, collectVars(f)] : f in Constrs }];
    check {
        return bt_search({}, CSP);
    }
};
// Given a partial assignment, this procedure tries to complete this assignment
// so that the given CSP is solved.
bt_search := procedure(Assignment, CSP) {
    [Variables, Values, Constraints] := CSP;
    if (#Assignment == #Variables) {
        return Assignment;
    }
    var := rnd(Variables - domain(Assignment));
    for (value in Values) {
        check {
            if (is_consistent(var, value, Assignment, Constraints)) {
                return bt_search(Assignment + { [var, value] }, CSP);
            }
        }
    }
    backtrack;
};
// Check, whether the extended assignment
//     Assignment + { [var, value] };
// is consistent with the given constraints.
is_consistent := procedure(var, value, Assignment, Constraints) {
    NA := Assignment + { [var, value] };
    return forall([F, Vars] in Constraints |
                  var in Vars && Vars <= domain(NA) => eval_constraint(NA, F)
                 );
};
// Evaluate a formula under a given Assignment.
//   Assignment: Binary relation assigning values to variables
//   Formula:    The formula to evaluate
eval_constraint := procedure(Assignment, Formula) {
    for ([var, value] in Assignment) {
        execute("$var$ := $value$;");
    }
    return eval(Formula);
};

main := procedure() {
    resetRandom();
    lower := 8;
    upper := 16;
    for (n in [lower .. upper]) {
        CSP      := createCSP(n);   
        start    := now();
        solution := solve(CSP);
        stop     := now();
        total    := (stop - start) / 1000.0;
        printSolution(solution);
        print("The computation for the $n$ queens problem took $total$ seconds.");
    }
};

