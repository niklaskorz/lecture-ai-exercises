loadLibrary("termUtilities");
load("queens-csp.stlx");
// load("send-more-money.stlx");

// This function collects all variables occurring in the formula f.
collectVars := procedure(f) {
    return varsTerm(parseTerm(f));
};
varsTerm := procedure(f) {
    match (f) {
        case v | isVariable(v): return { varName(v) };
        case n | isNumber(n):   return {};
        default:                return +/ [ varsTerm(t) : t in args(f) ];
    }
};
////////////////////////////////////////////////////////////////////////////////

// This is a very basic constraints solver that is based on backtracking.
solve := procedure(CSP) {
    [Variables, Values, Constrs] := CSP;
    ValuesPerVar := { [v, Values] : v in Variables };
    Annotated    := { [f, collectVars(f)] : f in Constrs };
    UnaryConstrs := { [f, V] : [f, V] in Annotated | #V == 1 };
    OtherConstrs := { [f, V] : [f, V] in Annotated | #V >= 2 };
    check {
        for ([f, V] in UnaryConstrs) {
            var               := arb(V);
            ValuesPerVar[var] := solve_unary(f, var, ValuesPerVar[var]);
        }
        return bt_search({}, ValuesPerVar, OtherConstrs);
    }
};
// Given a constraint containing only variable, find the values that satisfy
// this constraint.
solve_unary := procedure(f, var, Values) {
    Legal := {value : value in Values | eval_constraint({[var,value]}, f)};
    if (Legal == {}) { backtrack; } // game over
    return Legal;
};
// Given a partial assignment of variables, this procedure tries to complete
// this assignment so that the given CSP is solved.
bt_search := procedure(Assignment, Values, Constraints) {
    if (#Assignment == #Values) {
        return Assignment;
    }
    x := most_constrained_variable(Assignment, Values);
    for (val in Values[x]) {
        check {
            if (is_consistent(x, val, Assignment, Constraints)) {
                NewVals := propagate(x, val, Assignment, Constraints, Values);
                return bt_search(Assignment + {[x, val]}, NewVals, Constraints);
            }
        }
    }
    backtrack;
};
// Given the current Assignment, select a variable that has not yet been
// assigned a value.  Choose the variable that has the least number of
// possible values.
most_constrained_variable := procedure(Assignment, Values) {
    Unassigned := { [x, U] : [x, U] in Values | Assignment[x] == om };
    minSize    := min({ #U : [x, U] in Unassigned });
    return rnd({ x : [x, U] in Unassigned | #U == minSize });
};
// Given a variable x and a value v, extend the Assignment so that x is bound to v
// and compute the Values that can still be assigned to the unassigned variables.
propagate := procedure(x, v, Assignment, Constraints, Values) {
    Values[x] := { v };
    // constraint propagation is only done for binary constraints
    for ([F, Vars] in Constraints | x in Vars && #Vars == 2) {
        y := arb(Vars - { x });  // y is the other variable
        if (!(y in domain(Assignment))) {
            Legal := { w : w in Values[y] | eval_constraint({[x,v], [y,w]}, F) };
            if (Legal == {}) { backtrack; }
            Values[y] := Legal;
        }
    }
    return Values;
};
// Check, whether the extended assignment
//     Assignment + { [var, value] };
// is consistent with the given constraints.
is_consistent := procedure(var, value, Assignment, Constraints) {
    NA := Assignment + { [var, value] };
    return forall([F, Vars] in Constraints |
                  var in Vars && Vars <= domain(NA) => eval_constraint(NA, F)
                 );
};
// Evaluate a formula under a given Assignment.
//   Assignment: Binary relation assigning values to variables
//   Formula:    The formula to evaluate
eval_constraint := procedure(Assignment, Formula) {
    for ([var, value] in Assignment) {
        execute("$var$ := $value$;");
    }
    return eval(Formula);
};

main := procedure() {
    resetRandom();
    lower :=  8;
    upper := 32;
    for (n in [lower .. upper]) {
        CSP      := createCSP(n);
        start    := now();
        solution := solve(CSP);
        stop     := now();
        total    := (stop - start) / 1000.0;
        // printSolution(solution);
        print("The computation for the $n$ queens problem took $total$ seconds.");
    }
};
mainMoney := procedure() {
    resetRandom();
    CSP      := createCSP();
    start    := now();
    solution := solve(CSP);
    stop     := now();
    total    := (stop - start) / 1000.0;
    printSolution(solution);
    print("The computation took $total$ seconds.");
};
